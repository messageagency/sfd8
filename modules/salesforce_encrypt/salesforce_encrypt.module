<?php

/**
 * @file
 * Encrypted credential provider for salesforce oauth.
 */

use Drupal\encrypt\EncryptionProfileInterface;
use Drupal\salesforce_encrypt\Plugin\SalesforceAuthProvider\SalesforceEncryptedOAuthPlugin;
use Drupal\Core\Entity\EntityInterface;
use Drupal\salesforce\Entity\SalesforceAuthConfig;

/**
 * Implements hook_encryption_profile_predelete().
 *
 * If the assigned Encryption profile gets deleted, reset encryption settings.
 */
function salesforce_encryption_profile_predelete(EncryptionProfileInterface $entity) {
  // @todo foreach oauth encrypted provider plugin, invoke its hookEncryptionProfileDelete method.
}

/**
 * Implements hook_entity_presave().
 */
function salesforce_encrypt_entity_presave(EntityInterface $entity) {
  if (!$entity instanceof SalesforceAuthConfig) {
    return;
  }
  // Encrypt credentials prior to saving the config entity.
  if ($entity->getPlugin() instanceof SalesforceEncryptedOAuthPlugin) {
    $plugin = $entity->getPlugin();
    $settings = $entity->get('provider_settings');
    $settings['consumer_key'] = $plugin->encrypt($settings['consumer_key']);
    $settings['consumer_secret'] = $plugin->encrypt($settings['consumer_secret']);
    $entity->set('provider_settings', $settings);
  }
}
